<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--把外部的数据库配置文件加进来-->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>
    <!--配置druid连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverclass}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <!--配置初始化大小-->
        <property name="initialSize" value="1"></property>
        <property name="maxActive" value="20"></property>
        <property name="minIdle" value="1"></property>
        <!--配置获取连接等待超时时间,单位为ms-->
        <property name="maxWait" value="60000"></property>
        <!--配置间隔多久才进行一次检测，检查需要关闭的空闲连接，单位是ms-->
        <property name="timeBetweenEvictionRunsMillis" value="60000"></property>
        <!--配置一个连接在池中的最小生存时间，单位是ms-->
        <property name="minEvictableIdleTimeMillis" value="300000"></property>
        <!--用来检测是否有效的sql,如若干validationQuery为null，则其他属性不会起作用-->
        <property name="validationQuery" value="select 'x'"></property>
        <property name="testWhileIdle" value="true"></property>
        <property name="testOnBorrow" value="false"></property>
        <property name="testOnReturn" value="false"></property>
        <!--打开PSCache,并且制定每个连接上PSCache的大小-->
        <property name="poolPreparedStatements" value="true"></property>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"></property>
        <!--配置监控统计拦截的filters，去掉后监控界面sql无法统计-->
        <property name="filters" value="stat"/>

    </bean>
    <!--配置代理工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--加载mybatis全局配置文件-->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <!--mapper.xml所在位置-->
        <property name="mapperLocations" value="classpath*:mapper/*Mapper.xml"/>
    </bean>
    <!--配置接口所在的包，进行扫描-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--如果扫描多个包，中间使用半角逗号隔开-->
        <property name="basePackage" value="com.tencent.dao"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    <!--配置事务控制-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--配置事务的通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--配置对事务的增强-->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.tencent.service.impl.*.*(..))"></aop:advisor>
    </aop:config>
</beans>